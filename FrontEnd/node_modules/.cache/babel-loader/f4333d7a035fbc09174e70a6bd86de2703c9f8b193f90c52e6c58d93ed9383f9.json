{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState } from \"vuex\";\nimport format from 'date-fns/format';\nexport default {\n  data() {\n    return {\n      headerAffitto: [\"€/ora\", \"€/giorno\", \"€/settimana\"],\n      prezziAffitto: [],\n      message: '',\n      localCat: '',\n      endpoint: '',\n      cat: '',\n      method: '',\n      keyword: '',\n      isEmpty: false,\n      API_URL: this.$url + 'api/a/',\n      euro: new Intl.NumberFormat('en-DE', {\n        style: 'currency',\n        currency: 'EUR'\n      })\n    };\n  },\n  computed: {\n    ...mapState({\n      cate: 'category'\n      //annunci: state => state.annunci\n    }),\n\n    annunci() {\n      return this.$store.state.annunci.filter(this.filtraggio);\n    }\n  },\n  methods: {\n    formattedDate(date) {\n      return format(new Date(date), 'dd/M/YYY');\n    },\n    async getRating(annuncio) {\n      try {\n        fetch(this.$url + \"api/p/getp/\" + annuncio.inserzionista, {\n          method: 'GET',\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(resp => resp.json()).then(data => {\n          console.log(\"Il rating per\", annuncio.inserzionista, \" è di \", data.rating);\n          annuncio.rating = data.rating;\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async getNumRecensioni(annuncio) {\n      try {\n        fetch(this.$url + \"api/p/getp/\" + annuncio.inserzionista, {\n          method: 'GET',\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(resp => resp.json()).then(data => {\n          console.log(\"il numero di recensioni ricevute da \", annuncio.inserzionista, \" sono:\", data.recensioniRicevute);\n          annuncio.nRecensioni = data.recensioniRicevute;\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async getfa() {\n      try {\n        fetch(this.endpoint, {\n          method: 'POST',\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            categoria: this.cat\n          })\n        }).then(resp => resp.json()).then(data => {\n          // Here you get the data to modify as you please\n          if (data[0] === undefined) {\n            this.isEmpty = true;\n            this.message = \"Non è presente alcun articolo disponibile per questa categoria.\";\n            return;\n          }\n          this.$store.state.annunci = data.filter(a => a.visibile === true);\n          if (this.$store.state.annunci[0] === undefined) {\n            this.isEmpty = true;\n            this.message = \"Non è presente alcun articolo disponibile per questa categoria.\";\n            return;\n          }\n        });\n      } catch (error) {\n        console.error(error); // If there is any error you will catch them here\n      }\n    },\n\n    async getAll() {\n      try {\n        console.log(this.endpoint);\n        fetch(this.endpoint, {\n          method: 'GET',\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(resp => resp.json()).then(data => {\n          this.$store.state.annunci = data;\n          if (this.$store.state.annunci[0] === undefined) {\n            this.isEmpty = true;\n            this.message = this.$store.state.annunci.message;\n            return;\n          }\n          console.log();\n          this.$store.state.annunci = this.$store.state.annunci.filter(a => a.visibile === true);\n          this.$store.state.annunci = this.$store.state.annunci.filter(a => a.inserzionista !== this.$store.state.datiUtente.username);\n        });\n      } catch (error) {\n        console.error(error); // If there is any error you will catch them here\n      }\n    },\n\n    vaiAlleSpec(annuncio) {\n      this.$store.state.annuncioSelezionato = annuncio;\n      this.$router.push(\"/productspecs\");\n    },\n    onInput() {\n      this.cat = this.$refs.input.value;\n      this.$store.commit('selectCat', this.localCat);\n    },\n    filtraggio(x) {\n      var ok = true;\n      if (!this.$store.state.filtri.affitto && x.modalitaTransazione === 'Affitto') {\n        ok = false;\n      }\n      if (!this.$store.state.filtri.vendita && x.modalitaTransazione === 'Vendita') {\n        ok = false;\n      }\n      if (x.modalitaTransazione === \"Vendita\") {\n        if (x.prezzo < this.$store.state.filtri.prezzoVenditaMin) {\n          ok = false;\n        }\n        if (x.prezzo > this.$store.state.filtri.prezzoVenditaMax) {\n          ok = false;\n        }\n      }\n      if (x.modalitaTransazione === \"Affitto\") {\n        if (x.prezzoAffittoAlGiorno < this.$store.state.filtri.prezzoAffittoMin) {\n          ok = false;\n        }\n        if (x.prezzoAffittoAlGiorno > this.$store.state.filtri.prezzoAffittoMax) {\n          ok = false;\n        }\n      }\n      if (this.$store.state.filtri.categoria !== '' && x.categoria !== this.$store.state.filtri.categoria) {\n        ok = false;\n      }\n      return ok;\n    },\n    async deleteAnnuncio(id) {\n      try {\n        fetch(this.$url + \"api/a/deletea/\" + id, {\n          method: 'DELETE',\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            id: this.id\n          })\n        }).then(console.log(\"Annuncio con titolo\", id, \" è stato eliminato!\"));\n      } catch (error) {\n        console.error(error); // If there is any error you will catch them here\n      }\n    }\n  },\n\n  async created() {\n    this.cat = this.$store.state.filtri.categoria;\n    if (this.$store.state.keyword !== '') {\n      this.endpoint = this.API_URL + \"getkt/\" + this.$store.state.keyword;\n      await this.getAll();\n    } else if (this.cat === '') {\n      this.endpoint = this.API_URL + 'getAll';\n      await this.getAll();\n    } else {\n      this.endpoint = this.API_URL + 'getaf';\n      await this.getfa();\n    }\n    this.$store.commit('isResultView', true);\n    this.$store.state.annunci.forEach(annuncio => this.getRating(annuncio));\n    this.$store.state.annunci.forEach(annuncio => this.getNumRecensioni(annuncio));\n  },\n  updated() {\n    if (this.$store.state.annunci[0] === undefined) this.isEmpty = true;\n  }\n};","map":{"version":3,"mappings":";AAoEA;AACA;AAEA;EACAA;IACA;MACAC,gBACA,SACA,YACA,cACA;MACAC,iBAEA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC,MACA;QACAC;QACAC;MACA;IAEA;EACA;EACAC;IAEA;MACAC;MACA;IACA;;IACAC;MACA;IACA;EACA;EAGAC;IACAC;MACA;IACA;IACA;MACA;QACAC;UACAZ;UACAa;YAAA;UAAA;QACA,6BACAC;UACAC;UACAC;QACA;MACA;QACAD;MACA;IACA;IACA;MACA;QACAH;UACAZ;UACAa;YAAA;UAAA;QACA,6BACAC;UACAC;UACAC;QACA;MACA;QACAD;MACA;IACA;IACA;MACA;QACAH;UACAZ;UACAa;YAAA;UAAA;UACAI;YAAAC;UAAA;QACA,6BACAJ;UACA;UACA;YACA;YACA;YACA;UACA;UACA;UACA;YACA;YACA;YACA;UACA;QACA;MACA;QACAC;MACA;IACA;;IACA;MACA;QACAA;QACAH;UACAZ;UACAa;YAAA;UAAA;QACA,6BACAC;UACA;UACA;YACA;YACA;YACA;UACA;UACAC;UACA;UACA;QACA;MACA;QACAA;MACA;IACA;;IACAI;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;QACAC;MACA;MACA;QACAA;MACA;MACA;QACA;UACAA;QACA;QACA;UACAA;QACA;MACA;MACA;QACA;UACAA;QACA;QACA;UACAA;QACA;MACA;MACA;QACAA;MACA;MACA;IACA;IACA;MACA;QACAV;UACAZ;UACAa;YAAA;UAAA;UACAI;YAAAM;UAAA;QACA;MACA;QACAR;MACA;IACA;EAEA;;EACA;IACA;IACA;MACA;MACA;IACA,OACA;MACA;MACA;IACA;MACA;MACA;IACA;IACA;IACA;IACA;EACA;EACAS;IACA;EACA;AACA","names":["data","headerAffitto","prezziAffitto","message","localCat","endpoint","cat","method","keyword","isEmpty","API_URL","euro","style","currency","computed","cate","annunci","methods","formattedDate","fetch","headers","then","console","annuncio","body","categoria","vaiAlleSpec","onInput","filtraggio","ok","id","updated"],"sourceRoot":"src/views","sources":["SearchResults.vue"],"sourcesContent":["<template>\n    <div class=\"searchresults\">\n       \n        <v-card class=\"mx-auto justify-center\" max-width=\"1000\">\n            <v-container v-if=\"!isEmpty\" fluid>\n                <v-row dense>\n                    <v-col v-for=\"annuncio in annunci\" :key=\"annuncio._id\" :cols=\"4\">\n                        <v-card  :id=\"annuncio.titolo\" @click=\"vaiAlleSpec(annuncio)\" on >\n                            <v-img \n                            rounded \n                            :src=\"require('../assets/vuoto.webp')\" \n                            class=\"white--text align-end\" \n                            contain>\n                            </v-img>\n                            <v-card >\n                            <v-card-title color=\"grey\" class=\"indigo--text\">{{ annuncio.titolo }}</v-card-title>\n                                <v-card-text class=\"black--text\" > \n                                    <v-card flat v-if=\"annuncio.modalitaTransazione ==='Vendita'\"\n                                    align=\"center\"\n                                    class=\"mx-0\"\n                                    >\n                                    <h4 class=\"grey--text\">\n                                        prezzo proposto\n                                    </h4>\n                                    <h4>\n                                        {{ euro.format(annuncio.prezzo) }} \n                                    </h4>\n                                    \n                                </v-card>\n                                <v-card flat v-else-if=\"annuncio.modalitaTransazione === 'Affitto'\"\n                                align=\"center\"\n                                class=\"mx-0\"\n                                >\n                                <h4 class=\"grey--text\">ora     /     giorno     /    settimana</h4>\n\n                                <h4>\n                                   {{euro.format(annuncio.prezzoAffittoAllOra)}}    /   {{euro.format(annuncio.prezzoAffittoAlGiorno)}}     /   {{euro.format(annuncio.prezzoAffittoSettimanale)}} \n                                </h4>\n                            \n                            </v-card>\n                            <!-- capire perchè le recensioni  -->\n                                <v-card >\n                                    \n                                    <v-rating\n                                    :value=\"annuncio.rating\"\n                                    color=\"amber\"\n                                    dense\n                                    half-increments\n                                    readonly\n                                    size=\"14\"\n                                    ></v-rating>\n                                    <div class=\"grey--text\"> {{annuncio.inserzionista}} ({{ annuncio.nRecensioni }})</div>\n                                    <div>Pubblicato il: {{ formattedDate(annuncio.dataPubblicazione) }}</div>\n                                </v-card>\n                                </v-card-text>\n                            </v-card>\n                            <v-spacer></v-spacer>\n                        </v-card>\n                    </v-col>\n                </v-row>\n            </v-container>\n            <h1 v-else>{{ message }}</h1>\n        </v-card>\n    </div>\n\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\nimport format from 'date-fns/format';\n\nexport default {\n    data () {\n        return {\n            headerAffitto: [\n                \"€/ora\",\n                \"€/giorno\",\n                \"€/settimana\"\n            ],\n            prezziAffitto: [\n\n            ],\n            message:'',\n            localCat: '',\n            endpoint: '',\n            cat: '',\n            method: '',\n            keyword: '',\n            isEmpty: false,\n            API_URL: this.$url + 'api/a/',\n            euro:  \n            new Intl.NumberFormat('en-DE', {\n                style: 'currency',\n                currency: 'EUR',\n            })\n\n        }\n    },\n    computed:  {\n\n        ...mapState({\n            cate: 'category',\n            //annunci: state => state.annunci\n        }),\n        annunci() {\n            return this.$store.state.annunci.filter(this.filtraggio)\n        }\n    },\n\n\n    methods: {\n        formattedDate(date) {\n            return format(new Date(date), 'dd/M/YYY')\n        },\n        async getRating(annuncio) {\n            try {\n                fetch(this.$url + \"api/p/getp/\" + annuncio.inserzionista, {\n                    method: 'GET',\n                    headers: { \"Content-Type\": \"application/json\" }\n                }).then((resp) => resp.json())\n                .then(data => {\n                    console.log(\"Il rating per\", annuncio.inserzionista, \" è di \", data.rating)\n                    annuncio.rating = data.rating;\n                })\n            } catch (error) {\n                console.error(error);\n            }\n        },  \n        async getNumRecensioni(annuncio) {\n            try {\n                fetch(this.$url + \"api/p/getp/\" + annuncio.inserzionista, {\n                    method: 'GET',\n                    headers: { \"Content-Type\": \"application/json\" }\n                }).then((resp) => resp.json())\n                .then(data => {\n                console.log(\"il numero di recensioni ricevute da \", annuncio.inserzionista, \" sono:\", data.recensioniRicevute)\n                annuncio.nRecensioni = data.recensioniRicevute;\n                })\n            } catch (error) {\n                console.error(error);\n            }\n        },  \n        async getfa() {\n            try {\n                fetch(this.endpoint, {\n                    method: 'POST',\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify({ categoria: this.cat }),\n                }).then((resp) =>resp.json())\n                .then(data => {\n                // Here you get the data to modify as you please\n                    if(data[0] === undefined) {\n                        this.isEmpty=true; \n                        this.message = \"Non è presente alcun articolo disponibile per questa categoria.\";\n                        return;\n                    }\n                    this.$store.state.annunci=data.filter(a => a.visibile === true);\n                    if (this.$store.state.annunci[0] === undefined) {\n                        this.isEmpty=true; \n                        this.message = \"Non è presente alcun articolo disponibile per questa categoria.\";\n                        return;\n                    }\n                })\n                } catch(error) {\n                    console.error(error); // If there is any error you will catch them here\n                }\n        },\n        async getAll() {\n            try {\n                console.log(this.endpoint)\n                fetch(this.endpoint, {\n                    method: 'GET',\n                    headers: { \"Content-Type\": \"application/json\" }\n                }).then((resp) =>resp.json())\n                .then(data => {\n                    this.$store.state.annunci = data;\n                    if (this.$store.state.annunci[0] === undefined) {\n                        this.isEmpty=true; \n                        this.message = this.$store.state.annunci.message;\n                        return;\n                    }\n                    console.log()\n                    this.$store.state.annunci = this.$store.state.annunci.filter(a => a.visibile === true)\n                    this.$store.state.annunci = this.$store.state.annunci.filter(a => a.inserzionista !== this.$store.state.datiUtente.username);\n                    })\n                } catch(error) {\n                    console.error(error); // If there is any error you will catch them here\n                }\n        },\n        vaiAlleSpec(annuncio) {\n            this.$store.state.annuncioSelezionato = annuncio;\n            this.$router.push(\"/productspecs\");\n        },  \n        onInput() {\n            this.cat = this.$refs.input.value\n            this.$store.commit('selectCat', this.localCat)\n        },\n        filtraggio(x) {\n          var ok = true;\n          if (!this.$store.state.filtri.affitto && x.modalitaTransazione === 'Affitto')  {\n            ok = false;\n        }\n          if (!this.$store.state.filtri.vendita && x.modalitaTransazione === 'Vendita') {\n            ok = false;\n          }\n          if (x.modalitaTransazione === \"Vendita\") {\n            if (x.prezzo < this.$store.state.filtri.prezzoVenditaMin) {\n                ok = false;\n            }\n            if (x.prezzo > this.$store.state.filtri.prezzoVenditaMax) {\n                ok = false;\n            }\n          }\n          if (x.modalitaTransazione === \"Affitto\") {\n            if (x.prezzoAffittoAlGiorno < this.$store.state.filtri.prezzoAffittoMin) {\n                ok = false;\n            }\n            if (x.prezzoAffittoAlGiorno > this.$store.state.filtri.prezzoAffittoMax) {\n                ok = false;\n            }\n          }\n          if (this.$store.state.filtri.categoria !== '' && x.categoria !== this.$store.state.filtri.categoria) {\n            ok = false;\n        }\n          return ok;\n        },\n        async deleteAnnuncio(id) {\n            try {\n                fetch(this.$url + \"api/a/deletea/\" + id, {\n                    method: 'DELETE',\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify({ id: this.id }),\n                }).then(console.log(\"Annuncio con titolo\", id, \" è stato eliminato!\"))\n                } catch(error) {\n                    console.error(error); // If there is any error you will catch them here\n                }\n        }\n\n    },\n    async created() {\n        this.cat = this.$store.state.filtri.categoria;\n        if(this.$store.state.keyword !== '') {\n            this.endpoint = this.API_URL + \"getkt/\" + this.$store.state.keyword;\n            await this.getAll();\n        }\n        else if (this.cat === '') {\n            this.endpoint = this.API_URL+'getAll';\n            await this.getAll();\n        } else {\n            this.endpoint = this.API_URL+'getaf';\n            await this.getfa();\n        } \n        this.$store.commit('isResultView', true);\n        this.$store.state.annunci.forEach(annuncio => this.getRating(annuncio));\n        this.$store.state.annunci.forEach(annuncio => this.getNumRecensioni(annuncio));\n    },\n    updated() {\n        if(this.$store.state.annunci[0] === undefined) this.isEmpty = true;\n    } \n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}