{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      descrizione: '',\n      rating: 0,\n      valid: false,\n      required: [v => !!v || 'Campo obbligatorio!', v => v.length <= 200 || 'La recensione non può superare i 200 caratteri.']\n    };\n  },\n  methods: {\n    async creaRecensione() {\n      let inserzionista = this.$store.state.annuncioSelezionato.inserzionista;\n      let cliente = this.$store.state.datiUtente.username;\n      try {\n        fetch(this.$url + \"api/r/saver\", {\n          method: 'POST',\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-access-token\": this.$store.getters.token\n          },\n          body: JSON.stringify({\n            utenteRecensito: inserzionista,\n            utenteRecensore: cliente,\n            transazioneRecensita: this.$store.state.transazione._id,\n            stelle: this.rating,\n            descrizione: this.descrizione,\n            dataRecensione: this.$store.state.annuncioSelezionato.modalitaTransazione\n          })\n        }).then(resp => resp.json()).then(data => {\n          console.log(data);\n          this.contaRecensioni(inserzionista);\n          this.contaRecensioni(cliente);\n        });\n      } catch (err) {\n        console.error(err);\n      }\n      this.$store.state.noNavBar = false;\n      this.$router.push('/');\n    },\n    async contaRecensioni(nomeUtente) {\n      try {\n        fetch(this.$url + \"api/p/updaterat\", {\n          method: 'PATCH',\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            id: nomeUtente\n          })\n        }).then(console.log(\"Recensioni aggiornate per \", nomeUtente, \"!\"));\n      } catch (error) {\n        console.error(error); // If there is any error you will catch them here\n      }\n    }\n  },\n\n  mounted() {\n    this.$store.state.noNavBar = true;\n  }\n};","map":{"version":3,"mappings":";AAuCA;EACAA;IACA;MACAC;MACAC;MACAC;MACAC,WACAC,mCACAA;IAEA;EACA;EACAC;IACA;MACA;MACA;MACA;QACAC;UACAC;UACAC;YACA;YACA;UAAA;UACAC;YACAC;YACAC;YACAC;YACAC;YACAb;YACAc;UACA;QAEA,6BACAC;UACAC;UACA;UACA;QACA;MACA;QACAA;MACA;MACA;MACA;IACA;IACA;MACA;QACAV;UACAC;UACAC;YAAA;UAAA;UACAC;YACAQ;UACA;QACA;MACA;QACAD;MACA;IACA;EACA;;EACAE;IACA;EACA;AACA","names":["data","descrizione","rating","valid","required","v","methods","fetch","method","headers","body","utenteRecensito","utenteRecensore","transazioneRecensita","stelle","dataRecensione","then","console","id","mounted"],"sourceRoot":"src/views","sources":["UserReview.vue"],"sourcesContent":["<template>\n  <v-card-text class=\"mt-12\">\n    <h1 class=\"text-center display-2 accent--text\">Lascia una recensione a {{ this.$store.state.annuncioSelezionato.inserzionista }}</h1>\n    <v-form ref=\"form\" class=\"submit\" v-model=\"valid\">\n      <v-textarea \n      label=\"Raccontaci come è andata!\" \n      name=\"descrizione\" \n      prepend-icon=\"mdi-pencil\" \n      type=\"text\" \n      color=\"accent\"\n      :counter=\"200\" \n      no-resize \n      v-model=\"descrizione\" \n      :rules=\"required\" />\n\n        <v-rating\n      v-model=\"rating\"\n      background-color=\"blak lighten-3\"\n      color=\"yellow\"\n      size=\"64\"\n      :rules=\"required\"\n    ></v-rating>\n      <div class=\"text-center mt-3\">\n        <v-btn \n        class=\"submit\" \n        rounded color=\"accent accent-3\" \n        dark :disabled=\"!valid\" \n        @click=\"creaRecensione\"\n        >\n        INVIA RECENSIONE\n      </v-btn>\n      </div>\n    </v-form>\n  </v-card-text>\n\n</template>\n  \n<script>\n\n  export default {\n    data()  {\n      return {\n        descrizione:'',\n        rating: 0,\n        valid: false,\n        required: [\n          v => !!v || 'Campo obbligatorio!',\n          v => v.length <= 200 || 'La recensione non può superare i 200 caratteri.'\n        ],\n      }\n    },\n    methods: {\n      async creaRecensione() {\n        let inserzionista = this.$store.state.annuncioSelezionato.inserzionista;\n        let cliente = this.$store.state.datiUtente.username;\n      try {\n        fetch(this.$url + \"api/r/saver\", {\n          method: 'POST',\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-access-token\": this.$store.getters.token},\n          body: JSON.stringify({\n            utenteRecensito: inserzionista,\n            utenteRecensore: cliente,\n            transazioneRecensita : this.$store.state.transazione._id,\n            stelle: this.rating,\n            descrizione: this.descrizione,\n            dataRecensione: this.$store.state.annuncioSelezionato.modalitaTransazione\n          })\n\n        }).then((resp) => resp.json())\n        .then(data => {\n          console.log(data);\n          this.contaRecensioni(inserzionista);\n          this.contaRecensioni(cliente);\n        })\n        } catch (err) {\n          console.error(err);\n        }\n      this.$store.state.noNavBar = false;\n      this.$router.push('/')\n    },\n    async contaRecensioni(nomeUtente) {\n    try {\n      fetch(this.$url + \"api/p/updaterat\", {\n        method: 'PATCH',\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({ \n          id: nomeUtente,\n        })\n      }).then(console.log(\"Recensioni aggiornate per \", nomeUtente, \"!\"))\n    } catch (error) {\n      console.error(error); // If there is any error you will catch them here\n    }\n  },\n    },\n    mounted() {\n      this.$store.state.noNavBar = true;\n    }\n  }\n  </script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}