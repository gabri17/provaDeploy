{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState } from \"vuex\";\nimport format from 'date-fns/format';\nexport default {\n  data() {\n    return {\n      valid: false,\n      dates: [],\n      startDate: null,\n      endDate: null,\n      euro: new Intl.NumberFormat('en-DE', {\n        style: 'currency',\n        currency: 'EUR'\n      }),\n      required: [v => !!v || 'Campo obbligatorio']\n    };\n  },\n  methods: {\n    async creaTransazione() {\n      let costoEffettivo = this.$store.state.annuncioSelezionato.prezzo;\n      if (this.$store.state.annuncioSelezionato.modalitaTransazione === \"Affitto\") {\n        var differenceInTime = new Date(this.endDate) - new Date(this.startDate);\n        var totalDays = differenceInTime / (1000 * 3600 * 24);\n        costoEffettivo = this.$store.state.annuncioSelezionato.prezzoAffittoAlGiorno * totalDays;\n        console.log(\"il numero tot di giorni è: \", totalDays);\n      }\n      let inserzionista = this.$store.state.annuncioSelezionato.inserzionista;\n      let cliente = this.$store.state.datiUtente.username;\n      console.log(\"Il costo calcolato per la transazione è di: \", costoEffettivo);\n      try {\n        fetch(this.$url + \"api/t/savet\", {\n          method: 'POST',\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-access-token\": this.$store.getters.token\n          },\n          body: JSON.stringify({\n            venditore: inserzionista,\n            acquirente: cliente,\n            prodotto: this.$store.state.annuncioSelezionato.titolo,\n            pagamentoEffettuato: true,\n            metodoTransazione: \"Online\",\n            tipologiaTransazione: this.$store.state.annuncioSelezionato.modalitaTransazione,\n            prezzo: costoEffettivo\n          })\n        }).then(resp => resp.json()).then(data => {\n          console.log(data);\n          this.$store.state.transazione = data;\n          this.contaAnnunciOnline(inserzionista);\n          this.aggiornaStatVendita(inserzionista);\n          this.aggiornaStatAcquisti(cliente);\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    },\n    async aggiornaStatVendita(nomeUtente) {\n      try {\n        fetch(this.$url + \"api/p/updatesv\", {\n          method: 'PATCH',\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            id: nomeUtente\n          })\n        }).then(console.log(\"Statistiche vendite aggiornate per \", nomeUtente, \"!\"));\n      } catch (error) {\n        console.error(error); // If there is any error you will catch them here\n      }\n    },\n\n    async aggiornaStatAcquisti(nomeUtente) {\n      try {\n        fetch(this.$url + \"api/p/updatesa\", {\n          method: 'PATCH',\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            id: nomeUtente\n          })\n        }).then(console.log(\"Statistiche acquisti aggiornate per \", nomeUtente, \"!\"));\n      } catch (error) {\n        console.error(error); // If there is any error you will catch them here\n      }\n    },\n\n    async nascondiAnnuncio() {\n      try {\n        fetch(this.$url + \"api/a/updatea\", {\n          method: 'PATCH',\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-access-token\": this.$store.getters.token\n          },\n          body: JSON.stringify({\n            titolo: this.$store.state.annuncioSelezionato.titolo,\n            visibile: false\n          })\n        }).then(console.log(\"annuncio nascosto!\"));\n      } catch (error) {\n        console.error(error); // If there is any error you will catch them here\n      }\n    },\n\n    disablePastDates(val) {\n      return val >= new Date().toISOString().substr(0, 10);\n    },\n    disablePastDatesFromSelected(val) {\n      return val >= new Date(this.startDate).toISOString().substr(0, 10);\n    },\n    acquistaAffitta() {\n      if (!this.$store.state.dataAuth.success) {\n        this.$store.state.prodottoInBallo = true;\n        this.$router.push('/userloginsignup');\n        return;\n      }\n      console.log(\"Affittato dal \", this.startDate, \" al \", this.endDate);\n      this.nascondiAnnuncio();\n      this.creaTransazione();\n      this.$router.push('/userreview');\n    },\n    formattedDate(date) {\n      return format(new Date(date), 'dd/M/YYY');\n    }\n  },\n  computed: {\n    ...mapState({\n      annuncio: 'annuncioSelezionato',\n      utenteLoggato: 'dataAuth.success'\n    })\n  },\n  created() {\n    this.$store.state.search = false;\n  }\n};","map":{"version":3,"mappings":";AA4IA;AACA;AAEA;EACAA;IACA;MACAC;MACAC;MACAC;MACAC;MACAC,MACA;QACAC;QACAC;MACA;MACAC,WACAC;IAEA;EACA;EACAC;IACA;MACA;MACA;QACA;QACA;QACAC;QACAC;MACA;MACA;MACA;MACAA;MACA;QACAC;UACAC;UACAC;YACA;YACA;UAAA;UACAC;YACAC;YACAC;YACAC;YACAC;YACAC;YACAC;YACAC;UACA;QAEA,6BACAC;UACAZ;UACA;UACA;UACA;UACA;QACA;MACA;QACAA;MACA;IACA;IACA;MACA;QACAC;UACAC;UACAC;YAAA;UAAA;UACAC;YACAS;UACA;QACA;MACA;QACAb;MACA;IACA;;IACA;MACA;QACAC;UACAC;UACAC;YAAA;UAAA;UACAC;YACAS;UACA;QACA;MACA;QACAb;MACA;IACA;;IACA;MACA;QACAC;UACAC;UACAC;YACA;YACA;UAAA;UACAC;YACAU;YACAC;UACA;QACA;MACA;QACAf;MACA;IACA;;IACAgB;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;QACA;QACA;QACA;MACA;MACAlB;MACA;MACA;MACA;IACA;IACAmB;MACA;IACA;EACA;EACAC;IAEA;MACAC;MACAC;IACA;EACA;EAEAC;IACA;EACA;AACA","names":["data","valid","dates","startDate","endDate","euro","style","currency","required","v","methods","costoEffettivo","console","fetch","method","headers","body","venditore","acquirente","prodotto","pagamentoEffettuato","metodoTransazione","tipologiaTransazione","prezzo","then","id","titolo","visibile","disablePastDates","disablePastDatesFromSelected","acquistaAffitta","formattedDate","computed","annuncio","utenteLoggato","created"],"sourceRoot":"src/views","sources":["ProductSpecs.vue"],"sourcesContent":["<template>\n  <v-container class=\"productspecs\">\n    <v-row flex>\n      <v-col>\n\n        <h1>{{ annuncio.titolo }}</h1>\n      </v-col>\n      <v-col cols=\"2\" >\n        <v-btn block color=\"orange\" rounded flat v-if=\"utenteLoggato\" >+ wish list</v-btn>\n      </v-col>\n    </v-row>\n    <v-row>\n      <v-col>\n        <v-img rounded :src=\"require('../assets/vuoto.webp')\" class=\"white--text align-end\" max-width=\"400\">\n        </v-img>\n        <h2>\n          {{ annuncio.inserzionista }}\n        </h2>\n        <v-card>\n        \n          <v-rating :value=\"annuncio.rating\" color=\"amber\" dense half-increments readonly size=\"14\"></v-rating>\n          <div>Pubblicato il: {{ formattedDate(annuncio.dataPubblicazione) }}</div>\n        </v-card>\n      </v-col>\n      <v-col cols=\"7\">\n        <v-card color=\"blue lighten-5\">\n          <v-container>\n\n            <h4 >DESCRIZIONE:</h4>\n            <p>\n              {{ annuncio.descrizione }}\n            </p>\n          </v-container>\n        <v-container v-if=\"annuncio.modalitaTransazione==='Affitto'\">\n          <v-row>\n            <v-col>\n              <h3>\n                COSTO ORARIO \n              </h3>\n            </v-col>\n            <v-col>\n              <h3>\n                COSTO GIORNALIERO \n              </h3>\n            </v-col>\n            <v-col>\n              <h3>\n                COSTO SETTIMANALE \n              </h3>\n            </v-col>\n          </v-row>\n          <v-row>\n            <v-col>\n              <span>\n                {{euro.format(annuncio.prezzoAffittoAllOra)}}\n              </span>\n            </v-col>\n            <v-col>\n              <span>\n                {{euro.format(annuncio.prezzoAffittoAlGiorno)}}\n              </span>\n            </v-col>\n            <v-col>\n              <span>\n                {{euro.format(annuncio.prezzoAffittoSettimanale)}}\n              </span>\n            </v-col>\n          </v-row>\n          <v-row>\n            <v-col>\n              <h3>\n                Seleziona Date:\n              </h3>\n            </v-col>\n          </v-row>\n          <v-form class=\"submit\" v-model=\"valid\" >\n\n            <v-row>\n              <v-col>\n\n                <v-menu max-width=\"290\">\n                  <template v-slot:activator=\"{ on }\">\n                    <v-text-field \n                    :value=\"startDate\" \n                    label=\"Data Iniziale\" \n                    type=\"date\"\n                    v-on=\"on\">\n                  </v-text-field>\n                  </template>\n                  <v-date-picker \n                  v-model=\"startDate\" \n                  :allowed-dates=\"disablePastDates\"\n                  >\n                </v-date-picker>\n              </v-menu>\n            </v-col>\n            <v-col>\n              <v-menu max-width=\"290\">\n                <template v-slot:activator=\"{ on }\">\n                  <v-text-field \n                  :value=\"endDate\" \n                  label=\"Data Finale\" \n                  type=\"date\"\n                  v-on=\"on\" \n                  :rules=\"required\">\n                </v-text-field>\n                </template>\n                <v-date-picker \n                v-model=\"endDate\" \n                :allowed-dates=\"disablePastDatesFromSelected\"\n                >\n              </v-date-picker>\n              </v-menu>\n            </v-col>\n            </v-row>\n            <v-row>\n\n              <v-btn block class=\"submit white--text\" color=\"indigo\"  :disabled=\"!valid\"\n              @click=\"acquistaAffitta\">Affitta</v-btn>\n            </v-row>\n          </v-form>\n        </v-container>\n        <v-container v-else>\n          <p>vendita </p>\n          <v-row>\n            <v-col>\n              <v-btn @click=\"acquistaAffitta\">\n                compralo subito\n              </v-btn>\n            </v-col>\n          </v-row>\n          </v-container>\n      </v-card>\n      </v-col>\n    </v-row>\n    </v-container>\n</template>\n  \n<script>\n\nimport { mapState } from \"vuex\";\nimport format from 'date-fns/format';\n\nexport default {\n  data () {\n    return {\n      valid: false,\n      dates: [],\n      startDate: null,\n      endDate: null,\n      euro:\n        new Intl.NumberFormat('en-DE', {\n          style: 'currency',\n          currency: 'EUR',\n        }),\n      required: [\n        v => !!v || 'Campo obbligatorio'\n      ],\n    }\n  },\n  methods: {\n    async creaTransazione() {\n      let costoEffettivo = this.$store.state.annuncioSelezionato.prezzo;\n      if (this.$store.state.annuncioSelezionato.modalitaTransazione === \"Affitto\") {\n        var differenceInTime = new Date(this.endDate) - new Date(this.startDate);\n        var totalDays = differenceInTime / (1000 * 3600 * 24);\n        costoEffettivo = this.$store.state.annuncioSelezionato.prezzoAffittoAlGiorno * (totalDays);\n        console.log(\"il numero tot di giorni è: \", totalDays)\n      }\n      let inserzionista = this.$store.state.annuncioSelezionato.inserzionista;\n      let cliente = this.$store.state.datiUtente.username;\n      console.log(\"Il costo calcolato per la transazione è di: \", costoEffettivo)\n      try {\n        fetch(this.$url + \"api/t/savet\", {\n          method: 'POST',\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-access-token\": this.$store.getters.token},\n          body: JSON.stringify({\n            venditore: inserzionista,\n            acquirente: cliente,\n            prodotto : this.$store.state.annuncioSelezionato.titolo,\n            pagamentoEffettuato: true,\n            metodoTransazione: \"Online\",\n            tipologiaTransazione: this.$store.state.annuncioSelezionato.modalitaTransazione,\n            prezzo: costoEffettivo\n          })\n\n        }).then((resp) => resp.json())\n        .then(data => {\n          console.log(data);\n          this.$store.state.transazione = data;\n          this.contaAnnunciOnline(inserzionista);\n          this.aggiornaStatVendita(inserzionista);\n          this.aggiornaStatAcquisti(cliente);\n        })\n        } catch (err) {\n          console.error(err);\n        }\n    },\n    async aggiornaStatVendita(nomeUtente) {\n      try {\n        fetch(this.$url + \"api/p/updatesv\", {\n          method: 'PATCH',\n          headers: {\"Content-Type\": \"application/json\"},\n          body: JSON.stringify({ \n            id: nomeUtente,\n          })\n        }).then(console.log(\"Statistiche vendite aggiornate per \", nomeUtente, \"!\"))\n      } catch (error) {\n        console.error(error); // If there is any error you will catch them here\n      }\n    },\n    async aggiornaStatAcquisti(nomeUtente) {\n    try {\n      fetch(this.$url + \"api/p/updatesa\", {\n        method: 'PATCH',\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({ \n          id: nomeUtente,\n        })\n      }).then(console.log(\"Statistiche acquisti aggiornate per \", nomeUtente, \"!\"))\n    } catch (error) {\n      console.error(error); // If there is any error you will catch them here\n    }\n  },\n    async nascondiAnnuncio() {\n      try {\n          fetch(this.$url + \"api/a/updatea\", {\n            method: 'PATCH',\n            headers: { \n              \"Content-Type\": \"application/json\", \n              \"x-access-token\": this.$store.getters.token},\n            body: JSON.stringify({ \n              titolo: this.$store.state.annuncioSelezionato.titolo, \n              visibile: false\n            })\n          }).then(console.log(\"annuncio nascosto!\"))\n        } catch (error) {\n          console.error(error); // If there is any error you will catch them here\n        }\n    },\n    disablePastDates(val) {\n       return val >= new Date().toISOString().substr(0, 10)\n    },\n    disablePastDatesFromSelected(val) {\n       return val >= new Date(this.startDate).toISOString().substr(0, 10)\n    },\n    acquistaAffitta() {\n      if(!this.$store.state.dataAuth.success) {\n        this.$store.state.prodottoInBallo = true;\n        this.$router.push('/userloginsignup');\n        return;\n      }\n      console.log(\"Affittato dal \", this.startDate, \" al \", this.endDate);\n      this.nascondiAnnuncio();\n      this.creaTransazione();\n      this.$router.push('/userreview')\n    },\n    formattedDate(date) {\n    return format(new Date(date), 'dd/M/YYY');\n  },\n  },  \n  computed: {\n\n  ...mapState({\n    annuncio: 'annuncioSelezionato',\n    utenteLoggato: 'dataAuth.success'\n  }),\n  },\n\n  created() {\n    this.$store.state.search = false\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}